void main() {
  int V = 5; 
        int source = 0; 
  
        // Adjacency list representation of the  
        // connected edges 
        List<List<Node>> adj = new List<List<Node>>(); 
  
        // Initialize list for every node 
        for (int i = 0; i < V; i++) { 
            List<Node> item = new List<Node>(); 
            adj.add(item); 
        } 
  
        // Inputs for the DPQ graph 
        adj[0].add(new Node(1, 9)); 
        adj[0].add(new Node(2, 6)); 
        adj[0].add(new Node(3, 5)); 
        adj[0].add(new Node(4, 3)); 
  
        adj[2].add(new Node(1, 2)); 
        adj[2].add(new Node(3, 4)); 
  
        // Calculate the single source shortest path 
        DPQ dpq = new DPQ(V); 
        dpq.dijkstra(adj, source); 
  
        // Print the shortest path to all the nodes 
        // from the source node 
        print("The shortest path from node :"); 
        for (int i = 0; i < dpq.dist.length; i++) 
            print("$source to  ${i}  is  ${dpq.dist[i]}"); 
}

class DPQ {
  List dist;
  Set<int> settled;
  // @@@@ Add priority queue library or clas @@@@    -->    PriorityQueue<Node> pq;
  int V;
  List<List<Node>> adj;
  
  DPQ(this.V) 
  { 
    dist = new List(V); 
    settled = new Set<int>();
    // Add priorityqueue library or class
    // @@@@ Add priority queue library or clas @@@@     -->    pq = new PriorityQueue<Node>(V, new Node()); 
  } 
  
  // Function for Dijkstra's Algorithm
  void dijkstra(List<List<Node>>adj, int src) {
    this.adj = adj;
    
    for(int i = 0; i < V; i++)
      dist[i] = double.infinity;
    
    // Add source node to the priority queue
    // @@@@ Add priority queue library or clas @@@@     -->    pq.add(new Node(src, 0));
    
    // Distance to the source is 0
    dist[src] = 0;
    while (settled.length != V) {
      
      // remove the minimum distance node
      // from the priority queue
      // @@@@ Add priority queue library or clas @@@@     -->    int u = pq.remove().node;
      
      int u = 5; // For testing purposes only. remove after implement real priority queue
      
      // adding the node whose distance is finalized
      settled.add(u);
      
      e_Neighbours(u);
    }
  }
  
  void e_Neighbours(int u) {
    int edgeDistance = -1;
    int newDistance = -1;
    
    // All the neighbors of v
    for (int i = 0; i < adj[u].length; i++) {
      Node v = adj[u][i]; // Java: Node v = adj.get(u).get(i); , I think? Hopefully not 2d array syntax
      
      // If current node hasn't already been processed
      if (!settled.contains(v.node)) { 
        edgeDistance = v.cost;
        newDistance = dist[u] + edgeDistance; 

        // If new distance is cheaper in cost 
        if (newDistance < dist[v.node]) 
          dist[v.node] = newDistance; 

        // Add the current node to the queue 
        // @@@@ Add priority queue library or clas @@@@    -->    pq.add(new Node(v.node, dist[v.node])); 
      } 
    }
  }
}

class Node { // + implements Comparable?
  int node;
  int cost;
  
  Node(this.node, this.cost);
  
  int compare(Node node1, Node node2) {
    if (node1.cost < node2.cost) 
      return -1; 
    if (node1.cost > node2.cost)
      return 1; 
    return 0; 
  }
}
